1. Functions with inputs
                def greet_with_name(name):
                  print(f"Hello {name}")
                  print("How are you?")
                  print("The whether is quite good today!")

                greet_with_name("Ashley")
                        >>name is parameter, and ashley is argument
                        
2. Multiple inputs
                #Functions with more than 1 input
                def greet_with(name, location):
                  print(f"Hello {name}")
                  print(f"What is it like in {location}?")
3. Exercise: Paint area calculator

                #Write your code below this line üëá
                import math

                def paint_calc(height, width, cover):
                    num_cans = (height * width) / cover
                    round_up_cans = math.ceil(num_cans)
                    print(f"You'll need {round_up_cans} cans of paint.")

                #Write your code above this line üëÜ
                # Define a function called paint_calc() so that the code below works.   

                # üö® Don't change the code below üëá
                test_h = int(input("Height of wall: "))
                test_w = int(input("Width of wall: "))
                coverage = 5
                paint_calc(height=test_h, width=test_w, cover=coverage)
4. math.ceil >> round to integer
*5. Prime Number

                #Write your code below this line üëá
                def prime_checker(number):
                  is_prime = True   *********************************** 
                  for i in range(1,number): 
                    if number % i == 0:
                      is_prime = False   ***********************************
                  if is_prime:
                    print("It's a prime number")
                  else:
                    print("It's not a prime number.")


                #Write your code above this line üëÜ

                #Do NOT change any of the code belowüëá
                n = int(input("Check this number: "))
                prime_checker(number=n)

6. Caesar Cipher Part 1 - Encryption
              alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

              direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
              text = input("Type your message:\n").lower()
              shift = int(input("Type the shift number:\n"))

              #TODO-1: Create a function called 'encrypt' that takes the 'text' and 'shift' as inputs.
              def encrypt(plain_text, shift_number):
                cipher_text = ""
                for letter in plain_text:  ****************************Use for to do loop********************
                  exact_position = alphabet.index(letter)   ********************index function********************
                  final_position = exact_position + shift_number
                  new_letter = alphabet[final_position]  ********************List!!!****************
                  cipher_text += new_letter *******************!!!!*************************
                print(f"The encode text is {cipher_text}")
                  
                  #TODO-2: Inside the 'encrypt' function, shift each letter of the 'text' forwards in the alphabet by the shift amount and print the encrypted text.  
                  #e.g. 
                  #plain_text = "hello"
                  #shift = 5
                  #cipher_text = "mjqqt"
                  #print output: "The encoded text is mjqqt"

                  ##HINT: How do you get the index of an item in a list:
                  #https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-in-a-list

                  ##üêõBug alert: What happens if you try to encode the word 'civilization'?üêõ  *********************************

              #TODO-3: Call the encrypt function and pass in the user inputs. You should be able to test the code and encrypt a message. 
              encrypt(plain_text=text, shift_number=shift)
7. Python List index Method
  list.index(elmnt)
                fruits = ['apple', 'banana', 'cherry']
                x = fruits.index("cherry")
*8. Cisear- Cipher
                alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

              direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
              text = input("Type your message:\n").lower()
              shift = int(input("Type the shift number:\n"))

              #TODO-1: Combine the encrypt() and decrypt() functions into a single function called caesar(). 

              def caesar(start_text, shift_amount, cipher_direction):
                end_text = ""
                if cipher_direction == "decode":    ********if need to be out of for loop******
                    shift_amount *= -1       ****************This is a good way!!***************
                for letter in start_text:
                  position = alphabet.index(letter)
                  new_position = position + shift_amount
                  end_text += alphabet[new_position]
                print(f"Here's the {direction}d result: {end_text}")


              #TODO-2: Call the caesar() function, passing over the 'text', 'shift' and 'direction' values.
              caesar(start_text=text, shift_amount=shift, cipher_direction=direction)
*9. from art import logo
print(logo)

***10. Add While to exit/ restart the game

                  alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

                  def caesar(start_text, shift_amount, cipher_direction):
                    end_text = ""
                    if cipher_direction == "decode":
                      shift_amount *= -1
                    for char in start_text:
                      #TODO-3: What happens if the user enters a number/symbol/space?
                      #Can you fix the code to keep the number/symbol/space when the text is encoded/decoded?
                      #e.g. start_text = "meet me at 3"
                      #end_text = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ 3"
                      if char in alphabet:
                        position = alphabet.index(char)
                        new_position = position + shift_amount
                        end_text += alphabet[new_position]
                      else:
                        end_text += char
                    print(f"Here's the {cipher_direction}d result: {end_text}")

                  #TODO-1: Import and print the logo from art.py when the program starts.
                  from art import logo
                  print(logo)

                  #TODO-4: Can you figure out a way to ask the user if they want to restart the cipher program?
                  #e.g. Type 'yes' if you want to go again. Otherwise type 'no'.
                  #If they type 'yes' then ask them for the direction/text/shift again and call the caesar() function again?
                  #Hint: Try creating a while loop that continues to execute the program if the user types 'yes'.
                  should_end = False
                  while not should_end: ******************ADD while to stop **************

                    direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
                    text = input("Type your message:\n").lower()
                    shift = int(input("Type the shift number:\n"))
                    #TODO-2: What if the user enters a shift that is greater than the number of letters in the alphabet?
                    #Try running the program and entering a shift number of 45.
                    #Add some code so that the program continues to work even if the user enters a shift number greater than 26. 
                    #Hint: Think about how you can use the modulus (%).
                    shift = shift % 26   *********************in******************

                    caesar(start_text=text, shift_amount=shift, cipher_direction=direction)

                    restart = input("Type 'yes' if you want to go again. Otherwise type 'no'.\n")
                    if restart == "no":  ***********************Importatant to remember*****************************
                      should_end = True
                      print("Goodbye")
    




